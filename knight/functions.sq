form Function {
	matter func, args;

	change run() {
		nigh a = soul.args;

		fork a.length {
		path I:   reward (soul.func)(a[I])
		path II:  reward (soul.func)(a[I], a[II])
		path III: reward (soul.func)(a[I], a[II], a[III])
		alas: $bug(ùî¶ùî´ùî≥ùîûùî©ùî¶ùî° ùîûùîØùî§ ùî©ùî¢ùî´ùî§ùî±ùî•)
		}
	}
}

form AlwaysRunFunction {
	matter func, args;

	change run() {
		renowned run;
		nigh a = soul.args;

		fork a.length {
		path N:   reward (soul.func)()
		path I:   reward (soul.func)(run(a[I]))
		path II:  reward (soul.func)(run(a[I]), run(a[II]))
		path III: reward (soul.func)(run(a[I]), run(a[II]), run(a[III]))
		path IV:  reward (soul.func)(run(a[I]), run(a[II]), run(a[III]), run(a[IV]))
		alas: $bug(ùî¶ùî´ùî≥ùîûùî©ùî¶ùî° ùîûùîØùî§ ùî©ùî¢ùî´ùî§ùî±ùî•)
		}
	}
}

journey join (ary: [], sep) => '', (ary, sep) {
	renowned to-text
	nigh result = to-text(ary.verso)
	nigh i = II;
	whilst i <= ary.length {
		result = result + sep + to-text(ary[i])
		i = i + I
	}
	reward result
}

journey to-numeral
	N.B. text->numeral conversion in squire allows for roman numerals, this disallows it.
	(x: Text) if (ùîë | ‚Ñë | ùîô | ùîõ | ùîè | ‚Ñ≠ | ùîá | ùîê) ~~ substr(x, I, I) => N,
	(x) => tally(x);

journey to text
	(x: Numeral) => arabic(x),
	(x: yea) => ùî±ùîØùî≤ùî¢,
	(x: nay) => ùî£ùîûùî©ùî∞ùî¢,
	(x: ni) => '',
	(x: Book) => join(x, "\n"),
	(x) => prose(x);

journey to book
	(_: nay)     => [],
	(x: yea | N) => [x],
	(x: Numeral) {
		nigh b = [];
		start:
		whilst x = x / X {
			whence start;
			b = [x % X] + b
		}
		reward b
	},
	(x) => book(x);

journey run
	(x: Numeral | Text | Veracity | ni | Book) => x,
	(other) => other.run();

journey dump-out
	(_: yea) => proclaimn(ùî±ùîØùî≤ùî¢),
	(_: nay) => proclaimn(ùî£ùîûùî©ùî∞ùî¢),
	(_: ni) => proclaimn(ùî´ùî≤ùî©ùî©),
	(num: Numeral) => proclaimn(arabic(num)),
	(txt: Text) {
		nigh i = N;
		nigh c
		proclaimn('"');
		whilst i < txt.length {
			fork c = txt[i = i + I]{
			path "\n": proclaimn('\n')
			path "\r": proclaimn('\r')
			path "\t": proclaimn('\t')
			path "\\": proclaimn('\\\\')
			path "\"": proclaimn('\\"')
			alas: proclaimn(c)
			}
		}
		proclaimn('"');
	},
	(b: \(x) => x == []) => proclaimn('[]'), N.B. Cant use `[]` directly because its overloaded as old syntax for `|`
	(b: Book) {
		proclaimn('[');
		nigh i = N;
		start:
		whilst i < b.length {
			proclaimn(', ');
			whence start;
			dump-out(b[i = i + I])
		}
		proclaimn(']');
	};

journey cmp
	(x: Veracity, y) => tally(x) <=> tally(veracity(y)),
	(x: Book, y) {
		y = to-book(y);
		nigh min = x.length
		if min > y { min = y.length }
		nigh i = N
		whilst (i = i + I) <= min {
			nigh c
			if c = cmp(x[i], y[i]) {
				reward c
			}
		}
		reward x.length <=> y.length;
	},
	(x: Numeral, y) => x <=> to-numeral(y),
	(x: Text, y) => x <=> to-text(y);

journey eql(x,y) => x == y;

renowned not-always-run-functions = {
	ùîÖ: \(arg) => arg,
	'&': (journey	(x, y) if !(x=run(x)) => x,
						(x, y) => run(y)),
	'|': (journey	(x, y) if veracity(x=run(x)) => x,
						(x, y) => run(y)),
	'=': \(var, val) {
		var.assign(ran = run(val));
		reward ran;
	},
	ùîö: \(cond, body) {
		whilst run(cond) {
			run(body);
		}
		# IMPLICIT NI REWARD
	},
	‚Ñë: (journey	(cond, ift, _) if veracity(run(cond)) => run(ift),
						(cond, _, iff) => run(iff)),
}

renowned always-run-functions = {
	# Nullary
	‚Ñú: \() => gamble() % 4294967295, N.B. Far too large to represent with roman numerals
	ùîì: \() => inquire(),

	# UNARY
	‚Ñ≠: \(arg) => run(arg),
	ùîî: \(arg) => dismount(arg),
	ùîá: \(val) {
		nigh ran;
		dump-out(ran = val)
		reward ran;
	},
	ùîí: \(x) {
		nigh str = to-text(x);
		if str.length && substr(str, str.length, I) == '\\' {
			proclaimn(substr(str, I, str.length - I))
		} alas {
			proclaim(str)
		}
	},
	ùîè: \(x) => to-book(x).length,
	'!': \(x) => !x,
	'~': \(x) => -to-numeral(x),
	ùîÑ: \(x) => ascii(x),
	',': \(x) => [x],
	'[': (journey	(x: Text) => substr(x, I, I),
						(x: Book) => x.verso),
	']': (journey	(x: Text) => substr(x, II, x.length),
						(x: Book) {
							nigh ret = [];
							whilst I + ret < x {
								ret = ret + [x[ret.length + II]];
							}
							reward ret;x
						}),

	# BINARY
	'+': (journey	(x: Numeral, y) => x + to-numeral(y),
						(x: Text, y)    => x + to-text(y),
						(x: Book, y)    => x + to book(y)),
	'-': \(x, y) => x - to-numeral(y),
	'*': \(x, y) => x * to-numeral(y), N.B. LOL this happens to work for all the overrides
	'/': \(x, y) => x / to-numeral(y),
	'%': \(x, y) => x % to-numeral(y),
	'^': (journey	(x: Book, y) => join(x, to-text(y)),
						(x, y) => x ^ to-numeral(y)),
	'<': \(x, y) => cmp(x, y) < N,
	'>': \(x, y) => cmp(x, y) > N,
	'?': \(x, y) => eql(x, y),
	';': \(x, y) => y,

	# TERNARY
	ùîä: \(coll, start, len) {
		if Text ~~ coll {
			reward substr(coll, I + to-numeral(start), to-numeral(len))
		}

		nigh acc = [];
		len = to-numeral(len)
		start = to-numeral(start)

		whilst len {
			acc = acc + [coll[start = I + start]]
			len = len - I
		}
		reward acc
	},

	# QUATERNARY
	ùîñ: \(coll, start, len, repl) {
		if Text ~~ coll {
			start = to-numeral(start)
			reward substr(coll, I, start) + to-text(repl) +
				substr(coll, start + I + to-numeral(len),coll.length);
		}

		nigh acc = [];
		start = to-numeral(start)
		len = to-numeral(len)

		whilst acc.length < start {
			acc = acc + [coll[acc.length + I]]
		}
		acc = acc + to-book(repl)
		start = start + len
		whilst (start = start + I) <= coll.length {
			acc = acc + [coll[start]]
		}

		reward acc
	}
};
