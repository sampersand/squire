# Squire also has a concept of "classes," modeled after Plato's forms, with a
# dash of Aristotle. Quick crash course: Plato believes that the reason why, say,
# the grass is green is because it participates in the Green Form. So there's
# some perfect version of "Green" out there, and everything in our world that we
# call green is simply a pale imitation of that. As such, classes within Squire
# are called `form`s, whereas instances of the classes are called `imitation`s.
form Person {
	# Aristotle tweaked Plato's idea by suggesting that everything in our world
	# is made up of two parts: Matter and Form. As such, Squire uses `matter` to
	# describe what fields imitations can have.
	matter name, hungry;

	# You construct an `imitation` by simply `imitate`ing a form. (Note that the
	# `imitate` can be left off if it's simply assigning `matter`s---Squire will
	# generate one for you.)
	imitate(name) {
		# Instead of `this`/`self`, we talk about the `soul` of the imitation.
		soul.name = name;
		soul.hungry = nay; # we don't start off hungry
	}

	# Because the hallmark of the Forms was that they are unchanging, the key
	# characteristic of things in our world is that they _do_ change. Thus, in
	# Squire, we call instance methods `change`s. (Even if they don't actually
	# change anything...)
	change walk(miles) {
		if soul.hungry {
			# if we're hungry, "catapult" an exception.
			catapult "I'm too hungry to walk";
		}

		proclaim("I walked {miles} miles!");
		soul.hungry = yea;
	}
}

sam = Person(𝔖𝔞𝔪);
sam.walk(XII); #=> I walked XII miles!
attempt {
	sam.walk(I)
} alas err {
	proclaim("I can't walk: {err}"); #=> I can't walk: I'm too hungry to walk
}


# Here we look at `essence`s and `recall`s, which are how you interact with
# forms directly.
# Note: `regnal_number` is like the `III` in `King Foo the IIIrd`
form Monarch {
	# According to Plato, forms were distinguished from each other based on their
	# "essence"s---as such, Squire uses `essence`s for class fields. (Ok, yes
	# technically you can assign to `essences` within Squire, which contradicts
	# the idea that forms are unchanging. But we can't have our cake and eat it
	# too, so let's just ignore that...)
	essence regnal_numbers = {};

	# Plato's theory for why we know all the forms instinctively is because we
	# interacted with them in some previous life---that is, we "recall details
	# about them. Thus, class functions are called `recall`s (or `recollection`s)
	recall regnal_number_for(name) {
		# NB: The syntax _should_ be just `Monarch.regnal_numbers[name] || I`,
		# but the C implementation's parser and compiler aren't terrific...
		reward (Monarch.regnal_numbers[name]) || I
	}

	matter name, regnal_number;
	imitate(name) {
		soul.name = name;
		soul.regnal_number = Monarch.regnal_number_for(name);
		Monarch.regnal_numbers[name] = soul.regnal_number + I;
	}

	change to_text() {
		regnal = soul.regnal_number;
		if regnal == I {
			reward soul.name;
		}

		title = "{soul.name} the {regnal}";

		if XI <= (regnal % C) && (regnal % C) <= XIII {
		english_sucks:
			# special case because english sucks.
		}

		fork regnal % X {
			path I:
				title + 𝔰𝔱

			path II:
				title + 𝔫𝔡

			path III:
				title + 𝔯𝔡

			alas:
				whence english_sucks;
				title + 𝔱𝔥
		}
	}
}

proclaim("Hear ye, hear ye, behold: {Monarch(𝔖𝔞𝔪)}");
proclaim("Hear ye, hear ye, behold: {Monarch(𝔖𝔞𝔪)}");
proclaim("Hear ye, hear ye, behold: {Monarch(𝔖𝔞𝔪)}");
proclaim("Hear ye, hear ye, behold: {Monarch(𝔖𝔞𝔪)}");
# Hear ye, hear ye, behold: Sam
# Hear ye, hear ye, behold: Sam the IInd
# Hear ye, hear ye, behold: Sam the IIIrd
# Hear ye, hear ye, behold: Sam the IVth


# Squire also supports operator overloading and overloading conversions:
form Fraction {
	matter numer, denom;

	imitate (numer, denom) {
		if !denom {
			catapult "cannot create fractions with no denominator!"
		} alas if denom < N {
			soul.numer = -numer;
			soul.denom = -denom;
		} alas {
			soul.numer = numer;
			soul.denom = denom;
		}
	}

	# Conversion operators.
	change to_text() { "{soul.numer}/{soul.denom}" }
	change to_numeral() { soul.numer / soul.denom }
	change to_veracity() { !soul.numer }

	# Operator overloading
	change +(rhs) {
		if rhs.genus == Fraction {
			numer = soul.numer * rhs.denom + rhs.numer * soul.denom;
			denom = soul.denom * rhs.denom;
			Fraction(numer, denom)
		} alas {
			Fraction(soul.numer + soul.denom*rhs, soul.denom)
		}
	}
	change -(rhs) { soul + -rhs }
	# unary minus
	change -@() { Fraction(-soul.numer, soul.denom) }

	# There's overloads for almost everything:
	# `+`, `-`, `*`, `/`, `%`, `^` -- what you expect.
	# `to_{text,numeral,veracity,book,codex}` -- conversion to builtin types.
	# `()` - define what it means to call an imitation.
	# `[]` - indexing
	# `[]=` - indexing with assignment
}

half = Fraction(I, II);
proclaim(half + 5); # => XI/II