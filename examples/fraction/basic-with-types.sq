# Basic fraction, except it has types.
form Fraction {
	matter numer: Numeral, denom: Numeral;

	imitate(numer: Numeral, denom: Numeral) {
		if !denom {
			catapult "cannot make a fraction with a zero denom"
		}

		soul.numer = numer;
		soul.denom = denom
	}

	# The rhs can only be a fraction or a numeral---other things will throw an error
	change +(rhs: [Fraction, Numeral]): Fraction {
		if !(Fraction ~~ rhs) {
			rhs = Fraction(numeral(rhs), I);
		}

		reward Fraction(soul.numer*rhs.denom + rhs.numer*soul.denom, soul.denom*rhs.denom)
	}

	change to-text(): Text {
		if denom == I {
			reward "{soul.numer}"
		} alas {
			reward "{soul.numer}/{soul.denom}"
		}
	}
}

frac = Fraction(III, V)
proclaim(frac + V); #=> XXVIII/V

attempt {
	Fraction(III, "V")
} alas err {
	proclaim(err) # => no patterns match
}

attempt {
	Fraction(III, N)
} alas err {
	proclaim(err) # => cannot make a fraction with a zero denom
}

attempt {
	frac + yea;
} alas err {
	proclaim(err) # => no patterns match
}
