renowned Value;

form Parser {
	matter stream, index;

	imitate(stream: Text) {
		soul.stream = stream;
		soul.index = I;
	}

	change is-eof() => soul.index > length(soul.stream);
	change peek() => soul.stream[soul.index];
	change advance
		() if soul.index > length(soul.stream) { catapult 𝔢𝔪𝔭𝔱𝔵 𝔰𝔱𝔯𝔢𝔞𝔪 },
		() => soul.index = soul.index + I

	change peek_advance() {
		nigh peeked = soul.peek();
		soul.advance();
		reward peeked;
	}

	change take_whilst(cond: Journey): Text {
		nigh acc = "";
		nigh chr;

		whilst !soul.is-eof() && cond(chr = soul.peek()) {
			acc = acc + chr;
			soul.advance();
		}

		reward acc;
	}

	change next(): Value {
		renowned Literal;
		renowned Variable;
		renowned Function;

		N.B. These are actually defined in the global scope.
		journey isdigit(c) => '0' <= c && c <= '9';
		journey islower(c) => 𝔞 <= c && c <= 𝔷 || c == '_' || isdigit(c);
		journey isupper(c) => 𝔄 <= c && c <= ℨ || c == '_';

		nigh chr;
		nigh func;

		fork (chr=soul.peek()) {
			path '#':
				soul.take_whilst(\(c) => c != "\n")
				rejoin; N.B. Ie fallthru

			path [' ', "\t", "\n", "\r", '(', ')', '[', ']', '{', '}', ':']:
				soul.advance();
				reward soul.next();

			path isdigit:
				reward Literal(numeral(soul.take_whilst(isdigit)))

			path islower:
				reward Variable.fetch(soul.take_whilst(islower))

			path ["'", '"']:
				renowned _quote = chr N.B. Noncapturing lambadas go brr
				soul.advance()
				nigh result = Literal(soul.take_whilst(\(c) => c != _quote));

				if soul.peek_advance() != chr {
					catapult 𝔪𝔦𝔰𝔰𝔦𝔫𝔤 𝔠𝔩𝔬𝔰𝔦𝔫𝔤 𝔮𝔲𝔬𝔱𝔢;
				}

				reward result;

			path isupper:
				soul.take_whilst(isupper);
				fork chr {
					path 𝔗: reward Literal(yea)
					path 𝔉: reward Literal(nay)
					path 𝔑: reward Literal(ni)
				}

			done:
			alas:
				soul.advance();
				whence done;

				if ni == (func=Function.FUNCTIONS[chr]) {
					catapult 𝔲𝔫𝔨𝔫𝔬𝔴𝔫 𝔱𝔬𝔨𝔢𝔫 𝔰𝔱𝔞𝔯𝔱\: + chr;
				}

				nigh args = [];
				nigh i = I;

				whilst i <= func.arity {
					insert(args, i, soul.next());
					i = i + I;
				}

				reward Function(func, args);
		}
	}
}
