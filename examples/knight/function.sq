@transcribe "value.sq"
@transcribe "literal.sq"

form Function : Value {
	matter func: Journey;
	matter args: Book;

	change run() {
		fork soul.func.arity {
		path N:   reward (soul.func)(),
		path I:   reward (soul.func)(soul.args[I]),
		path II:  reward (soul.func)(soul.args[I], soul.args[II]),
		path III: reward (soul.func)(soul.args[I], soul.args[II], soul.args[III]),
		path IV:  reward (soul.func)(soul.args[I], soul.args[II], soul.args[III], soul.args[IV])
		}
	}

	essence FUNCTIONS: Codex = {
		'R': \() => Literal(gamble()),
		'P': \() => Literal(inquire()),

		'E': \(arg) => Parser(text(arg)).next().run(),
		'B': \(block) => block,
		'C': \(block) => block.run().run(),
		'`': \(cmd) => Literal(hex(cmd)),
		'Q': \(code) => dismount(code),
		'!': \(val) => Literal(!val),
		'L': \(str) => Literal(length(str.to-text())),
		'A': \(val) => Literal(ascii(val.run().value)),
		'~': \(num) => Literal(-tally(num)),
		'D': \(val) { (val = val.run()).dump(); reward val },
		'O': \(val) {
			val = text(val);
			if val && substr(val, val.length, I) == '\\' {
				if val != '\\' {
					proclaimn(substr(val, I, val.length - I));
				}
			} alas {
				proclaim(val);
			}
			reward Literal(ni)
		},
		',': \(val) => Literal([val.run()]),
		'[': \(val) => val.run().head(),
		']': \(val) => val.run().tail(),

		'+': \(l, r) => l.run() + r,
		'-': \(l, r) => l.run() - r,
		'*': \(l, r) => l.run() * r,
		'/': \(l, r) => l.run() / r,
		'%': \(l, r) => l.run() % r,
		'^': \(l, r) {
			l = tally(l)
			r = tally(r)
			reward Literal(l ^ r)
		},
		'<': \(l, r) => Literal(l.run() < r),
		'>': \(l, r) => Literal(l.run() > r),
		'?': \(l, r) => Literal(l.run() == r.run()),
		'&': \(l, r) {
			if l=l.run() { reward r.run() }
			reward l
		},
		'|': \(l, r) {
			if l=l.run() { reward l }
			reward r.run()
		},
		';': \(l, r) { l.run() ; reward r.run() },
		'=': \(l, r) {
			l.assign(r=r.run())
			reward r
		},
		'W': \(l, r) {
			whilst l { r.run() }
			reward Literal(ni)
		},
		'I': \(c, ift, iff) {
			if c { reward ift.run() }
			reward iff.run()
		},
		'G': \(str, start, len) => Literal(substr(str, I+start, len)),

		'S': \(str, start, len, repl) => 
			Literal(substr(str=text(str), I, start=tally(start)) +
				text(repl) + substr(str, I+start+len, length(str) - start - len))
	}
}

