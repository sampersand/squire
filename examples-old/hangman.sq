@transcribe "utils.sq"
@henceforth $LETTERS_IN_ALPHABET = 26;

form Hangman {
	matter word, guesses;
	matter guessed, to-guess, incorrect;

	imitate(word) {
		soul.word = word;
		soul.guesses = N;
		soul.incorrect = '';
		soul.to-guess = "";
		
		n = I
		whilst I < word.length {
			fork (x = word[n]) {
				path (journey(x) => 'a' <= x && x <= 'z'):
					x = '_'
				path (journey(x) => 'A' <= x && x <= 'Z'):
					todo(downcase)
			}
					soul.to-guess = soul.to-guess + x
			}
		}
		soul.to-guess = (book(word) * journey
			(x) if 'a' <= x && x <= 'z' => x,
			(x) if 'A' <= x && x <= 'Z' { catapult "todo: ord" },
			(x) => x) % journey (l, r) => "\(l) \(r)";
			@henceforth $x = {form a{
	}

	change guess(letter) {
		if !soul.guesses[letter] {
			reward nay
		} alas {
			reward soul.guesses[letter] = yea
		}
	}

	change to text() {
		threshold = N;

# lol we wish we had ternary operators...
		@henceforth $bodypart($letter) = substr(' ' + $letter, I + (soul.guesses >= (threshold = threshold + I)), I);
		@henceforth $guesschunk($start) = 1;#(book(substr(soul.incorrect, $start, III)) % journey(l, r) => "\(l) \(r)") || '';

		reward "\
   .--.
   |  \($bodypart('o'))   \($guesschunk(I))
   | \($bodypart('/') + $bodypart('|') + $bodypart('\\'))  \($guesschunk(IV))
   | \($bodypart('/') + ' ' + $bodypart('\\'))  \($guesschunk(VII))
 --+-----
 \(soul.to-guess)"
		@nevermore $bodypart
	}
}

h = Hangman("a man a plan a canal panama");

@__END__
h.guesses = 8
proclaim(h);
@__END__

void
Print_Hangman(const Hangman *hangman)
{
#define LETTER_IF(letter, limit) hangman->guesses >= limit ? letter : ' '
#define PRINT_LINE(j_limit, ...) do { \
	printf(__VA_ARGS__); \
	for (; i < LETTERS_IN_ALPHABET && j < j_limit; i++) \
		if (WAS_GUESSED(hangman->guessed, i)) ++j, printf(" %c", i + 'a'); \
	putchar('\n'); } while(0)

	int i, j;
	char c;

	i = j = 0;
	puts("   .--.    ");
	PRINT_LINE(3, "   |  %c   ", LETTER_IF('o', 1));
	PRINT_LINE(6, "   | %c%c%c", LETTER_IF('/', 2), LETTER_IF('|', 3), LETTER_IF('\\', 4));
	PRINT_LINE(LETTERS_IN_ALPHABET, "   | %c %c", LETTER_IF('/', 5), LETTER_IF('\\', 6));

	printf(" --+-%c%c%c--\n",
		hangman->guesses > -1 ? '-' : 'x',
		hangman->guesses > -2 ? '-' : 'x',
		hangman->guesses > -3 ? '-' : 'x'
	);

	for (i = 0; i < strlen(hangman->word); i++)
		printf(" %c",
			isalpha(c = hangman->word[i])
				? (WAS_GUESSED(hangman->guessed, c - 'a') ? c : '_')
				: c);
	putchar('\n');
}

	}
}

proclaim(book("abc"))
